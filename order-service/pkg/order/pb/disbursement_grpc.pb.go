// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: disbursement.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DisbursementClient is the client API for Disbursement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisbursementClient interface {
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error)
}

type disbursementClient struct {
	cc grpc.ClientConnInterface
}

func NewDisbursementClient(cc grpc.ClientConnInterface) DisbursementClient {
	return &disbursementClient{cc}
}

func (c *disbursementClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/v_pay.disbursement.v1.Disbursement/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisbursementServer is the server API for Disbursement service.
// All implementations must embed UnimplementedDisbursementServer
// for forward compatibility
type DisbursementServer interface {
	GetOrder(context.Context, *GetOrderRequest) (*Order, error)
	mustEmbedUnimplementedDisbursementServer()
}

// UnimplementedDisbursementServer must be embedded to have forward compatible implementations.
type UnimplementedDisbursementServer struct {
}

func (UnimplementedDisbursementServer) GetOrder(context.Context, *GetOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedDisbursementServer) mustEmbedUnimplementedDisbursementServer() {}

// UnsafeDisbursementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisbursementServer will
// result in compilation errors.
type UnsafeDisbursementServer interface {
	mustEmbedUnimplementedDisbursementServer()
}

func RegisterDisbursementServer(s grpc.ServiceRegistrar, srv DisbursementServer) {
	s.RegisterService(&Disbursement_ServiceDesc, srv)
}

func _Disbursement_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisbursementServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v_pay.disbursement.v1.Disbursement/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisbursementServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Disbursement_ServiceDesc is the grpc.ServiceDesc for Disbursement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Disbursement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v_pay.disbursement.v1.Disbursement",
	HandlerType: (*DisbursementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrder",
			Handler:    _Disbursement_GetOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disbursement.proto",
}
