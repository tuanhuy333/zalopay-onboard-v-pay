// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/service/publisher.go

// Package mock is a generated GoMock package.
package mock

import (
	models "order-service/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPublisherService is a mock of PublisherService interface.
type MockPublisherService struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherServiceMockRecorder
}

// MockPublisherServiceMockRecorder is the mock recorder for MockPublisherService.
type MockPublisherServiceMockRecorder struct {
	mock *MockPublisherService
}

// NewMockPublisherService creates a new mock instance.
func NewMockPublisherService(ctrl *gomock.Controller) *MockPublisherService {
	mock := &MockPublisherService{ctrl: ctrl}
	mock.recorder = &MockPublisherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisherService) EXPECT() *MockPublisherServiceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublisherService) Publish(order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherServiceMockRecorder) Publish(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisherService)(nil).Publish), order)
}
